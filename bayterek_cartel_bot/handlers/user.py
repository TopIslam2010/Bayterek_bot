# handlers/user.py

import json
import logging
import os
from aiogram import F, Router, Bot
from aiogram.filters import CommandStart
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, CallbackQuery

from core.keyboards import (
    generate_captcha_keyboard,
    CAPTCHA_EMOJI,
    generate_city_keyboard,
    generate_main_menu_keyboard,
    generate_products_keyboard,
    generate_weight_keyboard
)
from core.states import UserState
from database.db import get_user, create_user, create_order, generate_referral_code, update_referral_count, get_referral_count
from database.models import User, Order

router = Router()
logger = logging.getLogger(__name__)

# –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –æ —Ç–æ–≤–∞—Ä–∞—Ö –∏ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
try:
    with open('data/products.json', 'r', encoding='utf-8') as f:
        PRODUCTS = json.load(f)
    with open('data/welcome_message.txt', 'r', encoding='utf-8') as f:
        WELCOME_MESSAGE = f.read()
except FileNotFoundError as e:
    logger.error(f"–§–∞–π–ª –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω: {e}")
    PRODUCTS = {}
    WELCOME_MESSAGE = "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à –º–∞–≥–∞–∑–∏–Ω!"


@router.message(CommandStart())
async def start_handler(message: Message, state: FSMContext) -> None:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /start. –í –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è,
    –Ω–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∏–ª–∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.
    """
    user_id = message.from_user.id
    args = message.text.split()
    referral_code = None
    if len(args) > 1:
        referral_code = args[1]
    
    logger.info(f"–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /start –æ—Ç {user_id}. –†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥: {referral_code}")
    
    # –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–ª—É—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    user = await get_user(user_id)
    
    if user and user.is_verified:
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –∏ –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        await message.answer(
            WELCOME_MESSAGE,
            reply_markup=generate_main_menu_keyboard(),
            reply_to_message_id=message.message_id
        )
        await state.set_state(UserState.main_menu)
        if referral_code:
            await message.answer("–í—ã —É–∂–µ —è–≤–ª—è–µ—Ç–µ—Å—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º, –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –Ω–µ –±—É–¥–µ—Ç –∑–∞—Å—á–∏—Ç–∞–Ω–æ.")
    else:
        # –ï—Å–ª–∏ –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, –Ω–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏
        if referral_code:
            await state.update_data(invited_by_referral_code=referral_code)
            
        await message.answer(
            "–ü—Ä–∏–≤–µ—Ç! –ü—Ä–µ–∂–¥–µ —á–µ–º –º—ã –Ω–∞—á–Ω–µ–º, –¥–∞–≤–∞–π —É–±–µ–¥–∏–º—Å—è, —á—Ç–æ —Ç—ã –Ω–µ –±–æ—Ç. "
            "–ù–∞–π–¥–∏ –∏ –Ω–∞–∂–º–∏ –Ω–∞ —ç–º–æ–¥–∑–∏ —á–∞—Å–æ–≤ " + CAPTCHA_EMOJI,
            reply_markup=generate_captcha_keyboard()
        )
        await state.set_state(UserState.captcha)


@router.callback_query(UserState.captcha, F.data.startswith("captcha_"))
async def process_captcha(callback_query: CallbackQuery, state: FSMContext) -> None:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–ª–ª–±—ç–∫–∏ –∫–∞–ø—á–∏. –ü–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è –∑–∞—Å—á–∏—Ç—ã–≤–∞–µ—Ç —Ä–µ—Ñ–µ—Ä–∞–ª–∞
    –∏ –ø–µ—Ä–µ–≤–æ–¥–∏—Ç –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤—ã–±–æ—Ä–∞ –≥–æ—Ä–æ–¥–∞.
    """
    selected_emoji = callback_query.data.split("_")[1]
    user_data = await state.get_data()
    referral_code = user_data.get("invited_by_referral_code")

    if selected_emoji == CAPTCHA_EMOJI:
        # –£—Å–ø–µ—à–Ω–æ–µ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–µ –∫–∞–ø—á–∏
        if referral_code:
            referrer = await get_user(None, referral_code=referral_code)
            if referrer:
                await update_referral_count(referrer.telegram_id)
                await state.update_data(invited_by_user_id=referrer.telegram_id)
                logger.info(f"–ö–∞–ø—á–∞ –ø—Ä–æ–π–¥–µ–Ω–∞. –†–µ—Ñ–µ—Ä–∞–ª –∑–∞—Å—á–∏—Ç–∞–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {referrer.telegram_id}.")
            else:
                logger.warning(f"–†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥ {referral_code} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        
        await callback_query.message.edit_text(
            "–û—Ç–ª–∏—á–Ω–æ, –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è –ø—Ä–æ–π–¥–µ–Ω–∞! –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏ —Å–≤–æ–π –≥–æ—Ä–æ–¥:",
            reply_markup=generate_city_keyboard()
        )
        await state.set_state(UserState.city_selection)
    else:
        await callback_query.message.answer("–ù–µ–≤–µ—Ä–Ω–æ, –ø–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑.", reply_markup=generate_captcha_keyboard())
    await callback_query.answer()


@router.callback_query(UserState.city_selection, F.data.startswith("city_"))
async def process_city_selection(callback_query: CallbackQuery, state: FSMContext) -> None:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –≥–æ—Ä–æ–¥–∞. –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î.
    """
    city = callback_query.data.split("_")[1]
    user_id = callback_query.from_user.id
    username = callback_query.from_user.username or "anonymous"
    
    user_data = await state.get_data()
    invited_by_user_id = user_data.get("invited_by_user_id")
    
    new_user = User(
        telegram_id=user_id,
        username=username,
        city=city,
        is_verified=True,
        referral_code=await generate_referral_code(),
        invited_by_user_id=invited_by_user_id
    )
    await create_user(new_user)
    
    # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, —á—Ç–æ–±—ã –æ–Ω–æ –Ω–µ –º–µ—à–∞–ª–æ
    await callback_query.message.edit_text(f"–¢–≤–æ–π –≥–æ—Ä–æ–¥ ‚Äî {city}!")
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ—Å–Ω–æ–≤–Ω—ã–º –º–µ–Ω—é
    await callback_query.message.answer(
        WELCOME_MESSAGE,
        reply_markup=generate_main_menu_keyboard()
    )
    
    await state.set_state(UserState.main_menu)
    await callback_query.answer()


@router.message(F.text == "üõí –ö–∞—Ç–∞–ª–æ–≥ —Ç–æ–≤–∞—Ä–æ–≤", UserState.main_menu)
async def show_catalog(message: Message, state: FSMContext) -> None:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–Ω–æ–ø–∫—É '–ö–∞—Ç–∞–ª–æ–≥ —Ç–æ–≤–∞—Ä–æ–≤' –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤.
    """
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–∞—Ç–∞–ª–æ–≥ –Ω–µ –ø—É—Å—Ç
    if not PRODUCTS:
        await message.answer("–ö–∞—Ç–∞–ª–æ–≥ —Ç–æ–≤–∞—Ä–æ–≤ –≤—Ä–µ–º–µ–Ω–Ω–æ –ø—É—Å—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–π–¥–∏—Ç–µ –ø–æ–∑–∂–µ.")
        return

    await message.answer(
        "–ù–∞—à –∫–∞—Ç–∞–ª–æ–≥:",
        reply_markup=generate_products_keyboard(PRODUCTS)
    )
    await state.set_state(UserState.choosing_product)


@router.callback_query(UserState.choosing_product, F.data.startswith("product_"))
async def show_product_details(callback_query: CallbackQuery, state: FSMContext) -> None:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä —Ç–æ–≤–∞—Ä–∞ –∏–∑ –∫–∞—Ç–∞–ª–æ–≥–∞ –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –µ–≥–æ –¥–µ—Ç–∞–ª–∏.
    """
    product_id = callback_query.data.split("_")[1]
    product = PRODUCTS.get(product_id)
    
    if product:
        await state.update_data(current_product_id=product_id)
        
        await callback_query.message.answer_photo(
            photo=product["photo"],
            caption=f"<b>{product['name']}</b>\n\n{product['description']}\n\n"
                    f"–í—ã–±–µ—Ä–∏—Ç–µ –∂–µ–ª–∞–µ–º—ã–π –≤–µ—Å:",
            reply_markup=generate_weight_keyboard(product_id, product["weights"])
        )
        await state.set_state(UserState.choosing_weight)
    else:
        # –ï—Å–ª–∏ —Ç–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–æ–±—â–∞–µ–º –æ–± —ç—Ç–æ–º –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        await callback_query.message.answer("–¢–∞–∫–æ–≥–æ —Ç–æ–≤–∞—Ä–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –í–æ–∑–≤—Ä–∞—â–∞—é –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.",
                                            reply_markup=generate_main_menu_keyboard())
        await state.set_state(UserState.main_menu)
        
    await callback_query.answer()


@router.callback_query(F.data == "back_to_catalog", UserState.choosing_weight)
async def back_to_catalog(callback_query: CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥" –≤ –∫–∞—Ç–∞–ª–æ–≥–µ.
    """
    await callback_query.message.edit_text(
        "–ù–∞—à –∫–∞—Ç–∞–ª–æ–≥:",
        reply_markup=generate_products_keyboard(PRODUCTS)
    )
    await state.set_state(UserState.choosing_product)
    await callback_query.answer()


@router.callback_query(UserState.choosing_weight, F.data.startswith("buy_"))
async def process_purchase(callback_query: CallbackQuery, state: FSMContext, payment_bot: Bot) -> None:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –≤–µ—Å–∞ –∏ –Ω–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –ø–æ–∫—É–ø–∫–∏.
    –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏–º–µ–Ω—è–µ—Ç —Å–∫–∏–¥–∫—É, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –µ—ë –∑–∞—Ä–∞–±–æ—Ç–∞–ª.
    """
    data = callback_query.data.split("_")
    product_id = data[1]
    weight = float(data[2])
    
    product = PRODUCTS.get(product_id)
    if not product:
        await callback_query.message.answer("–û—à–∏–±–∫–∞: —Ç–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        await callback_query.answer()
        return

    price = float(product["weights"].get(str(int(weight))))
    
    if not price:
        await callback_query.message.answer("–û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π –≤–µ—Å —Ç–æ–≤–∞—Ä–∞.")
        await callback_query.answer()
        return

    user_id = callback_query.from_user.id
    referrals_count = await get_referral_count(user_id)
    discount_applied = False
    
    if referrals_count >= 5:
        # –ü—Ä–∏–º–µ–Ω—è–µ–º —Å–∫–∏–¥–∫—É 5%
        price *= 0.95
        price = round(price, 2)
        discount_applied = True
        await callback_query.message.answer("üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í–∞—à–∞ —Å–∫–∏–¥–∫–∞ 5% –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞!")

    await state.update_data(
        order_details={
            "product_name": product["name"],
            "weight": weight,
            "price": price,
            "user_id": user_id,
            "discount_applied": discount_applied
        }
    )

    await callback_query.message.answer(
        f"–û—Ç–ª–∏—á–Ω–æ! –í–∞—à –∑–∞–∫–∞–∑ –Ω–∞ **{weight} –≥—Ä–∞–º–º** —Ç–æ–≤–∞—Ä–∞ **{product['name']}** –Ω–∞ —Å—É–º–º—É **{price} —Ä—É–±** –ø—Ä–∏–Ω—è—Ç.\n"
        f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–µ—Ä–µ–≤–µ–¥–∏—Ç–µ —É–∫–∞–∑–∞–Ω–Ω—É—é —Å—É–º–º—É –Ω–∞ –Ω–∞—à—É –∫–∞—Ä—Ç—É. –ü–æ—Å–ª–µ –ø–µ—Ä–µ–≤–æ–¥–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç —á–µ–∫–∞ –≤ —ç—Ç–æ—Ç —á–∞—Ç."
    )
    
    await state.set_state(UserState.waiting_for_payment)
    await callback_query.answer()


@router.message(F.photo, UserState.waiting_for_payment)
async def process_payment_photo(message: Message, state: FSMContext, payment_bot: Bot) -> None:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ–ª—É—á–µ–Ω–∏–µ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞ –æ–ø–ª–∞—Ç—ã.
    """
    user_data = await state.get_data()
    order_details = user_data.get("order_details")

    if not order_details:
        await message.answer("–û—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–∫–∞–∑ –∑–∞–Ω–æ–≤–æ, –Ω–∞–∂–∞–≤ –Ω–∞ /start.")
        await state.clear()
        return
        
    order = Order(
        user_id=order_details["user_id"],
        product_name=order_details["product_name"],
        weight=order_details["weight"],
        price=order_details["price"],
        payment_screenshot=message.photo[-1].file_id,
        discount_applied=order_details.get("discount_applied", False)
    )

    await create_order(order)

    await message.answer(
        "–°–ø–∞—Å–∏–±–æ, –≤–∞—à —Å–∫—Ä–∏–Ω—à–æ—Ç –ø–æ–ª—É—á–µ–Ω! –û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞. "
        "–ö–∞–∫ —Ç–æ–ª—å–∫–æ –æ–ø–ª–∞—Ç–∞ –±—É–¥–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞, —è –≤–∞—Å —É–≤–µ–¥–æ–º–ª—é. \n\n"
        "–ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã, –≤—ã –º–æ–∂–µ—Ç–µ –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É: @suppor_bayterek"
    )

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É —á–µ—Ä–µ–∑ –≤—Ç–æ—Ä–æ–π –±–æ—Ç
    admin_id = int(os.getenv("ADMIN_ID"))
    discount_text = "–°–∫–∏–¥–∫–∞ 5% –ø—Ä–∏–º–µ–Ω–µ–Ω–∞!" if order.discount_applied else "–°–∫–∏–¥–∫–∞ –Ω–µ –ø—Ä–∏–º–µ–Ω—è–ª–∞—Å—å."
    await payment_bot.send_message(
        chat_id=admin_id,
        text=f"‚ÄºÔ∏è –ù–û–í–´–ô –ó–ê–ö–ê–ó ‚ÄºÔ∏è\n"
             f"–û—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: @{message.from_user.username} (ID: {message.from_user.id})\n"
             f"–¢–æ–≤–∞—Ä: {order.product_name} ({order.weight}–≥)\n"
             f"–°—É–º–º–∞: {order.price} —Ä—É–±\n"
             f"–°–æ—Å—Ç–æ—è–Ω–∏–µ: {discount_text}\n\n"
             f"–î–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è, –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥–æ–π /confirm."
    )
    
    await payment_bot.send_photo(
        chat_id=admin_id,
        photo=order.payment_screenshot,
        caption="–°–∫—Ä–∏–Ω—à–æ—Ç –æ–ø–ª–∞—Ç—ã:"
    )

    await state.clear()


@router.message(F.text == "üõ† –ü–æ–¥–¥–µ—Ä–∂–∫–∞", UserState.main_menu)
async def show_support(message: Message) -> None:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–Ω–æ–ø–∫—É '–ü–æ–¥–¥–µ—Ä–∂–∫–∞'.
    """
    await message.answer("–ü–æ –≤—Å–µ–º –≤–æ–ø—Ä–æ—Å–∞–º –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –∫ –æ–ø–µ—Ä–∞—Ç–æ—Ä—É: @suppor_bayterek")


@router.message(F.text == "üîó –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞", UserState.main_menu)
async def show_referral_link(message: Message) -> None:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–Ω–æ–ø–∫—É '–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞' –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—á—ë—Ç—á–∏–∫.
    """
    user_id = message.from_user.id
    user = await get_user(user_id)
    if user and user.referral_code:
        referral_link = f"https://t.me/BayterekCartelbot?start={user.referral_code}"
        
        referrals_count = await get_referral_count(user_id)
        
        status_text = ""
        if referrals_count >= 5:
            status_text = "üéâ –í—ã –∑–∞—Ä–∞–±–æ—Ç–∞–ª–∏ —Å–∫–∏–¥–∫—É 5% –Ω–∞ —Å–ª–µ–¥—É—é—â—É—é –ø–æ–∫—É–ø–∫—É!"
        else:
            status_text = f"–í—ã –ø—Ä–∏–≥–ª–∞—Å–∏–ª–∏ {referrals_count}/5 —á–µ–ª–æ–≤–µ–∫. –ü—Ä–∏–≥–ª–∞—Å–∏—Ç–µ –µ—â—ë {5 - referrals_count} –∏ –ø–æ–ª—É—á–∏—Ç–µ —Å–∫–∏–¥–∫—É 5%!"
            
        await message.answer(
            f"–í–∞—à–∞ —É–Ω–∏–∫–∞–ª—å–Ω–∞—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:\n{referral_link}\n\n"
            f"{status_text}"
        )
    else:
        await message.answer("–í–∞—à —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.")


@router.message(UserState.main_menu)
async def handle_invalid_text_in_main_menu(message: Message) -> None:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ª—é–±—ã–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ —è–≤–ª—è—é—Ç—Å—è –∫–æ–º–∞–Ω–¥–∞–º–∏,
    –∫–æ–≥–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é. –≠—Ç–æ –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ—Ç –±–∞–≥ —Å "–æ—à–∏–±–∫–æ–π".
    """
    await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é.")

@router.callback_query(UserState.main_menu)
async def handle_invalid_callback_in_main_menu(callback_query: CallbackQuery) -> None:
    """
    –ü–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞–µ—Ç –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫–∏, –∫–æ–≥–¥–∞ –±–æ—Ç –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é.
    –≠—Ç–æ –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ä—ã–µ –∫–æ–ª–ª–±—ç–∫–∏ –æ—Ç –ª–æ–º–∞–Ω–∏—è –±–æ—Ç–∞.
    """
    await callback_query.answer("–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –±–æ–ª—å—à–µ –Ω–µ–∞–∫—Ç—É–∞–ª—å–Ω–æ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é.", show_alert=True)

